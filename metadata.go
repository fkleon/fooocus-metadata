package fooocus

import (
	"encoding/json"
	"fmt"
	"log/slog"
	"slices"
	"strconv"
	"strings"

	"github.com/cozy/goexif2/exif"
)

const (
	// Fooocus suports encoding metadata with one of two schemes:
	// - the native JSON scheme
	// - the AUTOMATIC1111 plaintext format for compatibility with Stable Diffusion web UI
	fooocus = "fooocus"
	a1111   = "a1111"

	// Default step configuration for performance presets
	quality      = 60
	speed        = 30
	extremeSpeed = 8
	lightning    = 4
	hyperSD      = 4
)

// Fooocus metadata scheme (json). Implemented from v2.2.0 as per https://github.com/lllyasviel/Fooocus/pull/1940
// Reference implementation:
// - Serialisation: https://github.com/lllyasviel/Fooocus/blob/v2.5.5/modules/async_worker.py#L337
// - Deserialisation: https://github.com/lllyasviel/Fooocus/blob/v2.5.5/modules/meta_parser.py#L22
type Metadata struct {
	AdaptiveCfg          float32       `json:"adaptive_cfg,omitempty"`
	AdmGuidance          AdmGuidance   `json:"adm_guidance"`
	BaseModel            string        `json:"base_model"`
	BaseModelHash        string        `json:"base_model_hash"`
	ClipSkip             uint8         `json:"clip_skip"`
	CreatedBy            string        `json:"created_by,omitempty"`
	FreeU                string        `json:"freeu,omitempty"` // string: python tuple (b1: float, b2: float, s1: float, s2: float)
	FullNegativePrompt   []string      `json:"full_negative_prompt,omitempty"`
	FullPrompt           []string      `json:"full_prompt,omitempty"`
	GuidanceScale        float32       `json:"guidance_scale"`
	ImageNumber          uint          `json:"image_number,omitempty"`
	InpaintEngineVersion string        `json:"inpaint_engine_version,omitempty"`
	InpaintMode          string        `json:"inpaint_method,omitempty"`
	LoraCombined1        *LoraCombined `json:"lora_combined_1,omitempty"`
	LoraCombined2        *LoraCombined `json:"lora_combined_2,omitempty"`
	LoraCombined3        *LoraCombined `json:"lora_combined_3,omitempty"`
	LoraCombined4        *LoraCombined `json:"lora_combined_4,omitempty"`
	LoraCombined5        *LoraCombined `json:"lora_combined_5,omitempty"`
	Loras                []Lora        `json:"loras"`
	MetadataScheme       string        `json:"metadata_scheme"`
	NegativePrompt       string        `json:"negative_prompt"`
	Performance          string        `json:"performance"`
	Prompt               string        `json:"prompt"`
	PromptExpansion      string        `json:"prompt_expansion"`
	RefinerModel         string        `json:"refiner_model,omitempty"`
	RefinerModelHash     string        `json:"refiner_model_hash,omitempty"`
	RefinerSwapMethod    string        `json:"refiner_swap_method,omitempty"`
	RefinerSwitch        float32       `json:"refiner_switch"`
	Resolution           Resolution    `json:"resolution"`
	Sampler              string        `json:"sampler"`
	Scheduler            string        `json:"scheduler"`
	Seed                 string        `json:"seed"`
	Sharpness            float32       `json:"sharpness"`
	Steps                uint8         `json:"steps"`
	Styles               Styles        `json:"styles"`
	Vae                  string        `json:"vae"`
	Version              string        `json:"version"`
}

// Fooocus legacy metadata schema (json). This is only found in the private log HTML file
// generated by Fooocus versions pre v2.2.0.
// Fooocus Private Log (json) metadata scheme
// Reference implementation:
// - Serialisation: https://github.com/lllyasviel/Fooocus/blob/v2.5.5/modules/async_worker.py#L337
// - Deserialisation: https://github.com/lllyasviel/Fooocus/blob/v2.5.5/modules/meta_parser.py#L22
type MetadataLegacy struct {
	AdmGuidance          AdmGuidance   `json:"ADM Guidance"`
	BaseModel            string        `json:"Base Model"`
	CFGMimicking         float32       `json:"CFG Mimicking from TSNR,omitempty"`
	ClipSkip             uint8         `json:"CLIP Skip,omitempty"`
	FooocusV2Expansion   string        `json:"Fooocus V2 Expansion"`
	FreeU                string        `json:"FreeU,omitempty"`
	GuidanceScale        float32       `json:"Guidance Scale"`
	ImageNumber          uint          `json:"Image Number,omitempty"`
	InpaintEngineVersion string        `json:"Inpaint Engine Version,omitempty"`
	InpaintMode          string        `json:"Inpaint Mode,omitempty"`
	Lora1                *LoraCombined `json:"LoRA 1,omitempty"`
	Lora2                *LoraCombined `json:"LoRA 2,omitempty"`
	Lora3                *LoraCombined `json:"LoRA 3,omitempty"`
	Lora4                *LoraCombined `json:"LoRA 4,omitempty"`
	Lora5                *LoraCombined `json:"LoRA 5,omitempty"`
	Lora6                *LoraCombined `json:"LoRA 6,omitempty"`
	NegativePrompt       string        `json:"Negative Prompt"`
	OverWriteSwitch      float32       `json:"Overwrite Switch,omitempty"`
	Performance          string        `json:"Performance"`
	Prompt               string        `json:"Prompt"`
	RefinerModel         string        `json:"Refiner Model"`
	RefinerSwapMethod    string        `json:"Refiner Swap Method,omitempty"`
	RefinerSwitch        float32       `json:"Refiner Switch"`
	Resolution           Resolution    `json:"Resolution"`
	Sampler              string        `json:"Sampler"`
	Scheduler            string        `json:"Scheduler"`
	Seed                 int           `json:"Seed"`
	Sharpness            float32       `json:"Sharpness"`
	Steps                uint8         `json:"Steps,omitempty"` // TODO: post process default from Performance
	Styles               Styles        `json:"Styles"`
	Vae                  string        `json:"VAE,omitempty"`
	Version              string        `json:"Version"`
}

// Convert legacy metadata to current version
func (legacy *MetadataLegacy) toCurrent() (meta *Metadata) {
	var loras []Lora = make([]Lora, 0, 6)

	var addLora = func(lora *LoraCombined) {
		if lora != nil {
			loras = append(loras, Lora{
				Name:   lora.Name,
				Weight: lora.Weight,
				Hash:   lora.Hash,
			})
		}
	}
	addLora(legacy.Lora1)
	addLora(legacy.Lora2)
	addLora(legacy.Lora3)
	addLora(legacy.Lora4)
	addLora(legacy.Lora5)
	addLora(legacy.Lora6)

	// Unsupported:
	// - BaseModelHash
	// - CreatedBy
	// - FullNegativePrompt
	// - FullPrompt
	// - RefinerModelHash
	meta = &Metadata{
		AdaptiveCfg:          legacy.CFGMimicking,
		AdmGuidance:          legacy.AdmGuidance,
		BaseModel:            legacy.BaseModel,
		ClipSkip:             legacy.ClipSkip,
		FreeU:                legacy.FreeU,
		GuidanceScale:        legacy.GuidanceScale,
		ImageNumber:          legacy.ImageNumber,
		InpaintEngineVersion: legacy.InpaintEngineVersion,
		InpaintMode:          legacy.InpaintMode,
		LoraCombined1:        legacy.Lora1,
		LoraCombined2:        legacy.Lora2,
		LoraCombined3:        legacy.Lora3,
		LoraCombined4:        legacy.Lora4,
		LoraCombined5:        legacy.Lora5,
		Loras:                loras, // TODO: post process default from LoraCombined fields
		MetadataScheme:       fooocus,
		NegativePrompt:       legacy.NegativePrompt,
		Prompt:               legacy.Prompt,
		PromptExpansion:      legacy.FooocusV2Expansion,
		Performance:          legacy.Performance,
		RefinerModel:         legacy.RefinerModel,
		RefinerSwapMethod:    legacy.RefinerSwapMethod,
		RefinerSwitch:        legacy.RefinerSwitch,
		Resolution:           legacy.Resolution,
		Sampler:              legacy.Sampler,
		Scheduler:            legacy.Scheduler,
		Seed:                 strconv.Itoa(legacy.Seed),
		Sharpness:            legacy.Sharpness,
		Steps:                legacy.Steps,
		Styles:               legacy.Styles,
		Vae:                  legacy.Vae,
		Version:              legacy.Version,
	}
	return meta
}

// string: python tuple (width: int, height: int)
type Resolution [2]uint16

func (r *Resolution) UnmarshalJSON(p []byte) error {
	// Rewrite String-encoded Python tuple as JSON array:
	// "(1024, 1024)" -> [1024, 1024]
	pc := slices.Concat([]byte("["), p[2:len(p)-2], []byte("]"))

	var tmp [2]uint16
	if err := json.Unmarshal(pc, &tmp); err != nil {
		return err
	}

	*r = tmp
	return nil
}

func (r *Resolution) MarshalJSON() ([]byte, error) {
	return json.Marshal(fmt.Sprintf("(%v, %v)", r[0], r[1]))
}

// string: python tuple (p: float, n: float, e: float)
type AdmGuidance [3]float32

func (a *AdmGuidance) UnmarshalJSON(p []byte) error {
	// Rewrite String-encoded Python tuple as JSON array:
	// "(1.0, 1.0, 0.0)" -> [1.0, 1.0, 0.0]
	pc := slices.Concat([]byte("["), p[2:len(p)-2], []byte("]"))

	var tmp [3]float32
	if err := json.Unmarshal(pc, &tmp); err != nil {
		return err
	}

	*a = tmp
	return nil
}

func (a *AdmGuidance) MarshalJSON() ([]byte, error) {
	return json.Marshal(fmt.Sprintf("(%.1f, %.1f, %.1f)", a[0], a[1], a[2]))
}

// Styles are encoded within a string using single-quoted values, e.g.:
// "['Fooocus V2', 'Fooocus Enhance', 'Fooocus Sharp']"
type Styles []string

func (s *Styles) UnmarshalJSON(p []byte) error {
	var tmp string
	if err := json.Unmarshal(p, &tmp); err != nil {
		return err
	}

	var cleanStyles = strings.ReplaceAll(tmp, "'", "\"")
	var styles []string

	if err := json.Unmarshal([]byte(cleanStyles), &styles); err != nil {
		return err
	}
	*s = styles

	return nil
}

func (s *Styles) MarshalJSON() ([]byte, error) {
	var sb strings.Builder

	sb.WriteString("[")
	for idx, style := range *s {
		sb.WriteString("'")
		sb.WriteString(style)
		sb.WriteString("'")
		if idx < len(*s)-1 {
			sb.WriteString(", ")
		}
	}
	sb.WriteString("]")

	return json.Marshal(sb.String())
}

// Encoded as nested list of format:
// list [string, float32, string] (lora name, lora weight, lora hash)
type Lora struct {
	Name   string
	Weight float32
	Hash   string
}

func (l *Lora) UnmarshalJSON(p []byte) error {
	var tmp []json.RawMessage
	if err := json.Unmarshal(p, &tmp); err != nil {
		return err
	}
	if err := json.Unmarshal(tmp[0], &l.Name); err != nil {
		return err
	}
	if err := json.Unmarshal(tmp[1], &l.Weight); err != nil {
		return err
	}
	if err := json.Unmarshal(tmp[2], &l.Hash); err != nil {
		return err
	}
	return nil
}

func (l *Lora) MarshalJSON() ([]byte, error) {
	return json.Marshal([]interface{}{l.Name, l.Weight, l.Hash})
}

// String of format "<name> : <weight>"
type LoraCombined Lora

func (l *LoraCombined) UnmarshalJSON(p []byte) error {
	var tmp string
	if err := json.Unmarshal(p, &tmp); err != nil {
		return err
	}

	loraCombined := strings.SplitN(tmp, " : ", 2)
	l.Name = loraCombined[0]

	if len(loraCombined) > 1 {
		weight, err := strconv.ParseFloat(loraCombined[1], 32)
		if err != nil {
			return err
		}
		l.Weight = float32(weight)
	}
	return nil
}

func (l *LoraCombined) MarshalJSON() ([]byte, error) {
	return json.Marshal(fmt.Sprintf("%v : %g", l.Name, l.Weight))
}

func ExtractMetadataFromPngData(pngData map[string]string) (*Metadata, error) {

	slog.Debug("Extracting Fooocus metadata from PNG tEXt")

	if scheme, ok := pngData["fooocus_scheme"]; ok {
		parameters := pngData["parameters"]
		return ParseMetadata(scheme, parameters)
	} else {
		return nil, fmt.Errorf("No Fooocus metadata found in PNG data")
	}
}

func ExtractMetadataFromExifData(exifData *exif.Exif) (*Metadata, error) {

	slog.Debug("Extracting Fooocus metadata from EXIF data")

	makerNote, exifErr := exifData.Get(exif.MakerNote)
	if exifErr != nil {
		return nil, exifErr
	}
	scheme, _ := makerNote.StringVal()

	userComment, exifErr := exifData.Get(exif.UserComment)
	if exifErr != nil {
		return nil, exifErr
	}
	parameters, _ := userComment.StringVal()

	return ParseMetadata(scheme, parameters)
}

func ParseMetadata(scheme string, parameters string) (*Metadata, error) {

	// Scheme is one of 'fooocus' or 'a1111'
	if scheme != fooocus {
		return nil, fmt.Errorf("unsupported Fooocus metadata scheme: %s", scheme)
	}

	// Parse metadata
	metadata := &Metadata{}
	err := json.Unmarshal([]byte(parameters), metadata)
	if err != nil {
		return nil, fmt.Errorf("failed to read Fooocus parameters: %w", err)
	}

	return metadata, nil
}
